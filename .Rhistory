"evermarried",  "water", "toilet", "electricity", "radio", "tv", "fridge",
"bike", "motorcycle", "car", "floor", "walls", "roof", "religion", "ethnicity",
"education", "usual", "housemem", "housechild","reltohead", "sexhead",
"agehead", "teleph", "literacy", "cookingfuel", "wealthindex", "childrenborn",
"agefirstbirth")
full = merge(mothers, babies)
View(full)
View(full)
?glm
x = glm(inf_death~., data = full, family = binomial())
x = glm(inf_death~., data = full, family = binomial)
x = glm(inf_death~., data = full, family = binomial(link='logit'))
names(full)
x = glm(inf_death~monthin+yearint+monthmom+yearmom+evermarried+water+toilet+electricity+radio+tv+fridge+bike+motorcycle+car+floor+walls+roof+religion, data = full, family = binomial(link='logit'))
x = glm(inf_death~monthint+yearint+monthmom+yearmom+evermarried+water+toilet+electricity+radio+tv+fridge+bike+motorcycle+car+floor+walls+roof+religion, data = full, family = binomial(link='logit'))
View(full)
#importing file, removing column of ids
data = as.data.frame(fread("MotherData.csv"))
#splitting data to mother related data and baby related data
mothers = data[, c(1:78, 439:ncol(data))]
babies = data[, c(1, 79:438)]
#converting baby data to long format and renaming columns
babies = reshape(babies, varying = names(babies[, -1]), sep = "_", direction = "long")
babies = select(babies, caseid, bord, b0, b1, b2, b7, b9)
names(babies) = c("caseid", "bord", "twin", "month", "year", "months_lived", "lives_with")
#removing lines for mothers that didn't have a baby
babies = babies[complete.cases(babies[, "bord"]), ]
#creating dummy variable for babies who die before reaching one year
babies$inf_death = as.numeric(babies$months_lived < 12)
#setting inf_death to 0 for babies that are still alive
babies[is.na(babies$inf_death), "inf_death"] = 0
#selecting relevant mother data
mothers = select(mothers, caseid, v005, v006, v007, v009, v010, v113, v116, v119,
v120, v121, v122, v123, v124, v125, v127, v128, v129, v130, v131, v133,
v135, v136, v137, v150, v151, v152, v153, v155, v161, v191, v201, v212)
#renaming to help interpret results
names(mothers) = c("caseid", "samp_weight", "monthint", "yearint", "monthmom", "yearmom",
"water", "toilet", "electricity", "radio", "tv", "fridge",
"bike", "motorcycle", "car", "floor", "walls", "roof", "religion", "ethnicity",
"education", "usual", "housemem", "housechild","reltohead", "sexhead",
"agehead", "teleph", "literacy", "cookingfuel", "wealthindex", "childrenborn",
"agefirstbirth")
full = merge(mothers, babies)
x = glm(inf_death~., data = full, family = binomial(link='logit'))
View(mothers)
?fread
data = as.data.frame(fread("MotherData.csv", stringsAsFactors = TRUE,
na.strings = c("9", "99", "999", "9999")))
#importing file, removing column of ids
data = as.data.frame(fread("MotherData.csv", stringsAsFactors = TRUE,
na.strings = c("9", "99", "999", "9999")))
#splitting data to mother related data and baby related data
mothers = data[, c(1:78, 439:ncol(data))]
babies = data[, c(1, 79:438)]
#converting baby data to long format and renaming columns
babies = reshape(babies, varying = names(babies[, -1]), sep = "_", direction = "long")
babies = select(babies, caseid, bord, b0, b1, b2, b7, b9)
names(babies) = c("caseid", "bord", "twin", "month", "year", "months_lived", "lives_with")
#removing lines for mothers that didn't have a baby
babies = babies[complete.cases(babies[, "bord"]), ]
#creating dummy variable for babies who die before reaching one year
babies$inf_death = as.numeric(babies$months_lived < 12)
#setting inf_death to 0 for babies that are still alive
babies[is.na(babies$inf_death), "inf_death"] = 0
#selecting relevant mother data
mothers = select(mothers, caseid, v005, v006, v007, v009, v010, v113, v116, v119,
v120, v121, v122, v123, v124, v125, v127, v128, v129, v130, v131, v133,
v135, v136, v137, v150, v151, v152, v153, v155, v161, v191, v201, v212)
#renaming to help interpret results
names(mothers) = c("caseid", "samp_weight", "monthint", "yearint", "monthmom", "yearmom",
"water", "toilet", "electricity", "radio", "tv", "fridge",
"bike", "motorcycle", "car", "floor", "walls", "roof", "religion", "ethnicity",
"education", "usual", "housemem", "housechild","reltohead", "sexhead",
"agehead", "teleph", "literacy", "cookingfuel", "wealthindex", "childrenborn",
"agefirstbirth")
full = merge(mothers, babies)
View(full)
View(data)
data = as.data.frame(fread("MotherData.csv", stringsAsFactors = TRUE))
View(data)
#importing file, removing column of ids
data = as.data.frame(fread("MotherData.csv", stringsAsFactors = TRUE))
data
#splitting data to mother related data and baby related data
mothers = data[, c(1:78, 439:ncol(data))]
babies = data[, c(1, 79:438)]
#converting baby data to long format and renaming columns
babies = reshape(babies, varying = names(babies[, -1]), sep = "_", direction = "long")
babies = select(babies, caseid, bord, b0, b1, b2, b7, b9)
names(babies) = c("caseid", "bord", "twin", "month", "year", "months_lived", "lives_with")
#removing lines for mothers that didn't have a baby
babies = babies[complete.cases(babies[, "bord"]), ]
#creating dummy variable for babies who die before reaching one year
babies$inf_death = as.numeric(babies$months_lived < 12)
#setting inf_death to 0 for babies that are still alive
babies[is.na(babies$inf_death), "inf_death"] = 0
#selecting relevant mother data
mothers = select(mothers, caseid, v005, v006, v007, v009, v010, v113, v116, v119,
v120, v121, v122, v123, v124, v125, v127, v128, v129, v130, v131, v133,
v135, v136, v137, v150, v151, v152, v153, v155, v161, v191, v201, v212)
#renaming to help interpret results
names(mothers) = c("caseid", "samp_weight", "monthint", "yearint", "monthmom", "yearmom",
"water", "toilet", "electricity", "radio", "tv", "fridge",
"bike", "motorcycle", "car", "floor", "walls", "roof", "religion", "ethnicity",
"education", "usual", "housemem", "housechild","reltohead", "sexhead",
"agehead", "teleph", "literacy", "cookingfuel", "wealthindex", "childrenborn",
"agefirstbirth")
full = merge(mothers, babies)
#importing file, removing column of ids
data = as.data.frame(fread("MotherData.csv", stringsAsFactors = TRUE))
data
#splitting data to mother related data and baby related data
#importing file, removing column of ids
data = as.data.frame(fread("MotherData.csv", stringsAsFactors = TRUE))
#splitting data to mother related data and baby related data
mothers = data[, c(1:78, 439:ncol(data))]
babies = data[, c(1, 79:438)]
#converting baby data to long format and renaming columns
babies = reshape(babies, varying = names(babies[, -1]), sep = "_", direction = "long")
babies = select(babies, caseid, bord, b0, b1, b2, b7, b9)
names(babies) = c("caseid", "bord", "twin", "month", "year", "months_lived", "lives_with")
#removing lines for mothers that didn't have a baby
babies = babies[complete.cases(babies[, "bord"]), ]
#creating dummy variable for babies who die before reaching one year
babies$inf_death = as.numeric(babies$months_lived < 12)
#setting inf_death to 0 for babies that are still alive
babies[is.na(babies$inf_death), "inf_death"] = 0
#selecting relevant mother data
mothers = select(mothers, caseid, v005, v006, v007, v009, v010, v113, v116, v119,
v120, v121, v122, v123, v124, v125, v127, v128, v129, v130, v131, v133,
v135, v136, v137, v150, v151, v152, v153, v155, v161, v191, v201, v212)
#renaming to help interpret results
names(mothers) = c("caseid", "samp_weight", "monthint", "yearint", "monthmom", "yearmom",
"water", "toilet", "electricity", "radio", "tv", "fridge",
"bike", "motorcycle", "car", "floor", "walls", "roof", "religion", "ethnicity",
"education", "usual", "housemem", "housechild","reltohead", "sexhead",
"agehead", "teleph", "literacy", "cookingfuel", "wealthindex", "childrenborn",
"agefirstbirth")
full = merge(mothers, babies)
View(full)
head(full[, -c(3, 5)])
names(full)
full[full[, -c(3, 5, 21, 23, 24, 32, 33, 34, 36, 38)] == "9"] = NA
head(full[, -c(3, 5, 21, 23, 24, 32, 33, 34, 36, 38)])
full[full == "9", -c(3, 5, 21, 23, 24, 32, 33, 34, 36, 38)] = NA
head(full[full == "9", -c(3, 5, 21, 23, 24, 32, 33, 34, 36, 38)])
View(full)
head(full[full == "9")])
head(full[full == "9"])
head(full[, -c(3, 5, 21, 23, 24, 32, 33, 34, 36, 38)][full == "9"])
head(full[full == "9", -c(3, 5, 21, 23, 24, 32, 33, 34, 36, 38)][full == "9"])
head(full[full == "9", -c(3, 5, 21, 23, 24, 32, 33, 34, 36, 38)])
head(full[, -c(3, 5, 21, 23, 24, 32, 33, 34, 36, 38)])
head(full[, -c(3, 5, 21, 23, 24, 32, 33, 34, 36, 38)][full == "9"])
rows = full[, -c(3, 5, 21, 23, 24, 32, 33, 34, 36, 38)]
head(rows == "9")
rows[rows == "9"]
rows[rows == "9"] = NA
rows[rows == "99"] = NA
rows[rows == "999"] = NA
#importing file, removing column of ids
data = as.data.frame(fread("MotherData.csv", stringsAsFactors = TRUE))
#splitting data to mother related data and baby related data
mothers = data[, c(1:78, 439:ncol(data))]
babies = data[, c(1, 79:438)]
#converting baby data to long format and renaming columns
babies = reshape(babies, varying = names(babies[, -1]), sep = "_", direction = "long")
babies = select(babies, caseid, bord, b0, b1, b2, b7, b9)
names(babies) = c("caseid", "bord", "twin", "month", "year", "months_lived", "lives_with")
#removing lines for mothers that didn't have a baby
babies = babies[complete.cases(babies[, "bord"]), ]
#creating dummy variable for babies who die before reaching one year
babies$inf_death = as.numeric(babies$months_lived < 12)
#setting inf_death to 0 for babies that are still alive
babies[is.na(babies$inf_death), "inf_death"] = 0
#selecting relevant mother data
mothers = select(mothers, caseid, v005, v006, v007, v009, v010, v113, v116, v119,
v120, v121, v122, v123, v124, v125, v127, v128, v129, v130, v131, v133,
v135, v136, v137, v150, v151, v152, v153, v155, v161, v191, v201, v212)
#renaming to help interpret results
names(mothers) = c("caseid", "samp_weight", "monthint", "yearint", "monthmom", "yearmom",
"water", "toilet", "electricity", "radio", "tv", "fridge",
"bike", "motorcycle", "car", "floor", "walls", "roof", "religion", "ethnicity",
"education", "usual", "housemem", "housechild","reltohead", "sexhead",
"agehead", "teleph", "literacy", "cookingfuel", "wealthindex", "childrenborn",
"agefirstbirth")
full = merge(mothers, babies)
#removing 9, 99, and 999 (NA codes) from rows that do not contain true 9's
full[full[, -c(3, 5, 21, 23, 24, 32, 33, 34, 36, 38)] == "9"] = NA
#importing file, removing column of ids
data = as.data.frame(fread("MotherData.csv", stringsAsFactors = TRUE))
#splitting data to mother related data and baby related data
mothers = data[, c(1:78, 439:ncol(data))]
babies = data[, c(1, 79:438)]
#converting baby data to long format and renaming columns
babies = reshape(babies, varying = names(babies[, -1]), sep = "_", direction = "long")
babies = select(babies, caseid, bord, b0, b1, b2, b7, b9)
names(babies) = c("caseid", "bord", "twin", "month", "year", "months_lived", "lives_with")
#removing lines for mothers that didn't have a baby
babies = babies[complete.cases(babies[, "bord"]), ]
#creating dummy variable for babies who die before reaching one year
babies$inf_death = as.numeric(babies$months_lived < 12)
#setting inf_death to 0 for babies that are still alive
babies[is.na(babies$inf_death), "inf_death"] = 0
#selecting relevant mother data
mothers = select(mothers, caseid, v005, v006, v007, v009, v010, v113, v116, v119,
v120, v121, v122, v123, v124, v125, v127, v128, v129, v130, v131, v133,
v135, v136, v137, v150, v151, v152, v153, v155, v161, v191, v201, v212)
#renaming to help interpret results
names(mothers) = c("caseid", "samp_weight", "monthint", "yearint", "monthmom", "yearmom",
"water", "toilet", "electricity", "radio", "tv", "fridge",
"bike", "motorcycle", "car", "floor", "walls", "roof", "religion", "ethnicity",
"education", "usual", "housemem", "housechild","reltohead", "sexhead",
"agehead", "teleph", "literacy", "cookingfuel", "wealthindex", "childrenborn",
"agefirstbirth")
full = merge(mothers, babies)
#removing 9, 99, and 999 (NA codes) from rows that do not contain true 9's
rows = full[, -c(3, 5, 21, 23, 24, 32, 33, 34, 36, 38)]
rows[rows == "9"] = NA
rows[rows == "99"] = NA
rows[rows == "999"] = NA
full[, -c(3, 5, 21, 23, 24, 32, 33, 34, 36, 38)] = rows
View(full)
x = glm(inf_death~., data = full, family = binomial(link='logit'))
names(full)
levels(full$caseid)
names()
names(full)
head(levels(full$water))
head(levels(full$toilet))
head(levels(full$electricity))
head(levels(full$radio))
head(levels(full$tv))
head(levels(full$fridge))
head(levels(full$bike))
head(levels(full$motorcycle))
head(levels(full$car))
head(levels(full$floor))
names(full)
head(levels(full$walls))
head(levels(full$roof))
head(levels(full$religion))
head(levels(full$ethnicity))
head(levels(full$education))
head(full$education)
head(levels(full$usual))
rows = full[, -c(3, 5, 21, 23, 24, 32, 33, 34, 36, 38)]
rows[rows == "9"] = NA
rows[rows == "99"] = NA
rows[rows == "999"] = NA
full[, -c(3, 5, 21, 23, 24, 32, 33, 34, 36, 38)] = rows
head(levels(full$roof))
summary(full$roof)
names(full)
head(levels(full$housemem))
head(levels(full$housechild))
head(levels(full$reltohead))
head(levels(full$sexhead))
head(levels(full$agehead))
head(levels(full$teleph))
head(levels(full$literacy))
head(levels(full$cookingfuel))
head(levels(full$childrenborn))
head(levels(full$twin))
head(levels(full$months_lived))
head(levels(full$lives_with))
#importing file, removing column of ids
data = as.data.frame(fread("MotherData.csv", stringsAsFactors = TRUE))
#splitting data to mother related data and baby related data
mothers = data[, c(1:78, 439:ncol(data))]
babies = data[, c(1, 79:438)]
#converting baby data to long format and renaming columns
babies = reshape(babies, varying = names(babies[, -1]), sep = "_", direction = "long")
babies = select(babies, caseid, bord, b0, b1, b2, b7, b9)
names(babies) = c("caseid", "bord", "twin", "month", "year", "months_lived", "lives_with")
#removing lines for mothers that didn't have a baby
babies = babies[complete.cases(babies[, "bord"]), ]
#creating dummy variable for babies who die before reaching one year
babies$inf_death = as.numeric(babies$months_lived < 12)
#setting inf_death to 0 for babies that are still alive
babies[is.na(babies$inf_death), "inf_death"] = 0
#selecting relevant mother data
mothers = select(mothers, caseid, v005, v006, v007, v009, v010, v113, v116, v119,
v120, v121, v122, v123, v124, v125, v127, v128, v129, v130, v131, v133,
v135, v136, v137, v150, v151, v152, v153, v155, v161, v191, v201, v212)
#renaming to help interpret results
names(mothers) = c("caseid", "samp_weight", "monthint", "yearint", "monthmom", "yearmom",
"water", "toilet", "electricity", "radio", "tv", "fridge",
"bike", "motorcycle", "car", "floor", "walls", "roof", "religion", "ethnicity",
"education", "usual", "housemem", "housechild","reltohead", "sexhead",
"agehead", "teleph", "literacy", "cookingfuel", "wealthindex", "childrenborn",
"agefirstbirth")
full = merge(mothers, babies)
#removing 9, 99, and 999 (NA codes) from rows that do not contain true 9's
rows = full[, -c(3, 5, 21, 23, 24, 32, 33, 34, 36, 38)]
rows[rows == "9"] = NA
rows[rows == "99"] = NA
rows[rows == "999"] = NA
full[, -c(3, 5, 21, 23, 24, 32, 33, 34, 36, 38)] = rows
full[full == ""] = NA
names(full)
x = glm(inf_death~montint+yearint+monthmom+yearmom+water+toilet+electricity+radio+tv+fridge+bike+motorcycle+car+floor+walls+roof+religion+ethnicity+education+usual+housemem+housechild+reltohead+sexhead+agehead+teleph+literacy+cookingfuel+wealthindex+childrenborn+agefirstbirth+bord+twin+month+year+lives_with, data = full, family = binomial(link='logit'))
x = glm(inf_death~monthint+yearint+monthmom+yearmom+water+toilet+electricity+radio+tv+fridge+bike+motorcycle+car+floor+walls+roof+religion+ethnicity+education+usual+housemem+housechild+reltohead+sexhead+agehead+teleph+literacy+cookingfuel+wealthindex+childrenborn+agefirstbirth+bord+twin+month+year+lives_with, data = full, family = binomial(link='logit'))
x = glm(inf_death~water+toilet+electricity+radio+tv+fridge+bike+motorcycle+car+floor+walls+roof+religion+ethnicity+education+usual+housemem+reltohead+sexhead+agehead+teleph+literacy+cookingfuel+wealthindex+agefirstbirth+bord+twin+lives_with, data = full, family = binomial(link='logit'))
typeof(full$inf_death)
full[full == "no"] = 0
full[full == "yes"] = 1
View(full)
temp = flat %>%
select(over_50k, education_id) %>%
group_by(education_id) %>%
summarise(over_50k = sum(over_50k == "1")/(sum(over_50k == "1") + sum(over_50k == "0")))
head(full$caseid)
x = head(full$caseid)
strsplit(x, " ")
x = head(as.character(full$caseid))
strsplit(x, " ")
strsplit(x, "/s")
strsplit(x, /s)
strsplit(x, "\\s+")[[1]]
strsplit(x, " +")[[1]]
strsplit(x, " \s+")[[1]]
strsplit(x, "\\s+")[[1]]
strsplit(x, "\\s+")[[]][2]
strsplit(x, "\\s+")[[1]][2]
sapply(strsplit(x, "\\s+"), `[`, 2))
sapply(strsplit(x, "\\s+"), `[`, 2)
location = sapply(strsplit(as.character(full$caseid), "\\s+"), `[`, 2)
head(location)
hist(as.numeric(location))
strsplit("236 17 3"), "\\s+")
strsplit("236 17 3") "\\s+")
strsplit("236 17 3", "\\s+")
location = sapply(strsplit(as.character(full$caseid[6247:6254]), "\\s+"), `[`, 2)
location
as.character(full$caseid[6247:6254])
full$location = sapply(strsplit(as.character(full$caseid), "\\s+"), `[`, 2)
names(full)
mean(c(1, 2, 3))
type(full$inf_death)
typeof(full$inf_death)
temp = full %>%
select(location, wealthindex, inf_death) %>%
group_by(location) %>%
summarise(wealthindex = mean(wealthindex),inf_death = mean(inf_death))
View(temp)
names(data)
hist(data$v000)
hist(as.numeric(data$v000))
hist(as.numeric(data$v001))
hist(as.numeric(location))
hist(as.numeric(full$location))
hist(as.numeric(data$v001))
ggplot(temp) + geom_point(aes(x = wealthindex, y = inf_death))
libraru(ggplot2)
library(ggplot2)
ggplot(temp) + geom_point(aes(x = wealthindex, y = inf_death))
ggplot(temp) + geom_point(aes(x = wealthindex, y = inf_death)) + xlab("Wealth Index") + ylab("Infant Mortality Rate")
ggplot(temp) + geom_point(aes(x = wealthindex, y = inf_death)) + xlab("Wealth Index") + ylab("Infant Mortality Rate")
loc = as.data.frame(fread("Locations.csv"))
View(loc)
library(ggmap)
?get_map
loc = as.data.frame(fread("Locations.csv"))
loc = merge(loc, means, by.x = "v001", by.y = "location")
means = temp
loc = merge(loc, means, by.x = "v001", by.y = "location")
map = get_map(location = c(lon = mean(loc$lon), lat = mean(loc$lat)), zoom = 5)
?geom_point
map = get_map(location = c(lon = mean(loc$lon), lat = mean(loc$lat)), zoom = 5)
mapPoints = ggmap(map) + geom_point(aes(x = lon, y = lat, color = inf_death), data = loc, alpha = .5)
mapPoints
map = get_map(location = c(lon = mean(loc$lon), lat = mean(loc$lat)), zoom = 7)
ggmap(map) + geom_point(aes(x = lon, y = lat, color = inf_death), data = loc, alpha = .5)
loc = as.data.frame(fread("Locations.csv"))
loc = merge(loc, means, by.x = "v001", by.y = "location")
map = get_map(location = c(lon = mean(loc$lon), lat = mean(loc$lat)), zoom = 7)
ggmap(map) + geom_point(aes(x = lon, y = lat, color = inf_death), data = loc, alpha = .5)
map = get_map(location = c(lon = mean(loc$lon), lat = mean(loc$lat)), zoom = 6)
ggmap(map) + geom_point(aes(x = lon, y = lat, color = inf_death), data = loc, alpha = .75)
mode(c(1, 1, 12))
median(c(1, 1, 12))
map = get_map(location = c(lon = median(loc$lon), lat = median(loc$lat)), zoom = 6)
ggmap(map) + geom_point(aes(x = lon, y = lat, color = inf_death), data = loc, alpha = .75)
median(loc$lat)
median(loc$lon)
map = get_map(location = c(lon = 7.368, lat = 7.6331), zoom = 6)
ggmap(map) + geom_point(aes(x = lon, y = lat, color = inf_death), data = loc, alpha = .75)
map = get_map(location = c(lon = 7.38, lat = 7.6331), zoom = 6)
ggmap(map) + geom_point(aes(x = lon, y = lat, color = inf_death), data = loc, alpha = .75)
map = get_map(location = c(lon = 7.5, lat = 7.6331), zoom = 6)
ggmap(map) + geom_point(aes(x = lon, y = lat, color = inf_death), data = loc, alpha = .75)
map = get_map(location = c(lon = 8, lat = 8), zoom = 6)
ggmap(map) + geom_point(aes(x = lon, y = lat, color = inf_death), data = loc, alpha = .75)
map = get_map(location = c(lon = 8.2, lat = 8.2), zoom = 6.3)
map = get_map(location = c(lon = 8.2, lat = 8.2), zoom = 7)
ggmap(map) + geom_point(aes(x = lon, y = lat, color = inf_death), data = loc, alpha = .75)
map = get_map(location = c(lon = 8.2, lat = 8.2), zoom = 6)
ggmap(map) + geom_point(aes(x = lon, y = lat, color = inf_death), data = loc, alpha = .75)
map = get_map(location = c(lon = 8.5, lat = 8.5), zoom = 6)
ggmap(map) + geom_point(aes(x = lon, y = lat, color = inf_death), data = loc, alpha = .75)
ggmap(map) + geom_point(aes(x = lon, y = lat, color = inf_death), size = 1, data = loc, alpha = .75)
ggmap(map) + geom_point(aes(x = lon, y = lat, color = inf_death), size = 3, data = loc, alpha = .75)
ggmap(map) + geom_point(aes(x = lon, y = lat, color = inf_death), size = 2, data = loc, alpha = .75)
ggmap(map) + geom_point(aes(x = lon, y = lat, color = inf_death), size = 1.6, data = loc, alpha = .75)
ggmap(map) + geom_point(aes(x = lon, y = lat, color = inf_death), size = 1.6, data = loc, alpha = .75) +
scale_colour_gradient(low = muted("green"), high = muted("red"), guide = "colourbar")
library(scales)
ggmap(map) + geom_point(aes(x = lon, y = lat, color = inf_death), size = 1.6, data = loc, alpha = .75) +
scale_colour_gradient(low = muted("green"), high = muted("red"), guide = "colourbar")
ggmap(map) + geom_point(aes(x = lon, y = lat, color = inf_death), size = 1.6, data = loc, alpha = .75) +
scale_colour_gradient(low = muted("green"), high = "red", guide = "colourbar")
ggmap(map) + geom_point(aes(x = lon, y = lat, color = inf_death), size = 1.6, data = loc, alpha = .75) +
scale_colour_gradient(low = muted("green"), high = "red", guide = "colourbar") + labs(color = "% Inf. Mortality")
loc = as.data.frame(fread("Locations.csv"))
loc = merge(loc, means, by.x = "v001", by.y = "location")
map = get_map(location = c(lon = 8.5, lat = 8.5), zoom = 6)
ggmap(map) + geom_point(aes(x = lon, y = lat, color = inf_death), size = 1.6, data = loc, alpha = .75) +
scale_colour_gradient(low = muted("green"), high = "red", guide = "colourbar") + labs(color = "% Inf. Mortality")
loc = as.data.frame(fread("Locations.csv"))
loc = merge(loc, means, by.x = "v001", by.y = "location")
map = get_map(location = c(lon = 8.5, lat = 8.5), zoom = 6)
ggmap(map) + geom_point(aes(x = lon, y = lat, color = inf_death), size = 1.6, data = loc, alpha = .75) +
scale_colour_gradient(low = muted("green"), high = "red", guide = "colourbar") + labs(color = "% Inf. Mortality")
loc = as.data.frame(fread("Locations.csv"))
loc = merge(loc, means, by.x = "v001", by.y = "location")
map = get_map(location = c(lon = 8.5, lat = 8.5), zoom = 6)
ggmap(map) + geom_point(aes(x = lon, y = lat, color = inf_death), size = 1.6, data = loc, alpha = .75) +
scale_colour_gradient(low = muted("green"), high = "red", guide = "colourbar") + labs(color = "% Inf. Mortality")
loc = as.data.frame(fread("Locations.csv"))
loc = merge(loc, means, by.x = "v001", by.y = "location")
map = get_map(location = c(lon = 8.5, lat = 8.5), zoom = 6)
ggmap(map) + geom_point(aes(x = lon, y = lat, color = inf_death), size = 1.8, data = loc, alpha = .75) +
scale_colour_gradient(low = muted("green"), high = "red", guide = "colourbar") + labs(color = "% Inf. Mortality")
loc = as.data.frame(fread("Locations.csv"))
loc = merge(loc, means, by.x = "v001", by.y = "location")
map = get_map(location = c(lon = 8.5, lat = 8.5), zoom = 6)
ggmap(map) + geom_point(aes(x = lon, y = lat, color = inf_death), size = 1.75, data = loc, alpha = .75) +
scale_colour_gradient(low = muted("green"), high = "red", guide = "colourbar") + labs(color = "% Inf. Mortality")
ggmap(map) + geom_point(aes(x = lon, y = lat, color = inf_death), size = 1.9, data = loc, alpha = .75) +
scale_colour_gradient(low = muted("green"), high = "red", guide = "colourbar") + labs(color = "% Inf. Mortality")
ggmap(map) + geom_point(aes(x = lon, y = lat, color = inf_death), size = 2, data = loc, alpha = .75) +
scale_colour_gradient(low = muted("green"), high = "red", guide = "colourbar") + labs(color = "% Inf. Mortality")
ggmap(map) + geom_point(aes(x = lon, y = lat, color = inf_death), size = 2, data = loc, alpha = .75) +
scale_colour_gradient(low = muted("green"), high = "red", guide = "colourbar") + labs(color = "% Inf. Mortality") +
theme(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank())
#chunk is pushed right by the html wrapper
#getting the group id from the combined caseid
full$location = sapply(strsplit(as.character(full$caseid), "\\s+"), `[`, 2)
means = full %>%
select(location, wealthindex, inf_death) %>%
group_by(location) %>%
summarise(wealthindex = mean(wealthindex),inf_death = mean(inf_death))
ggplot(means) + geom_point(aes(x = wealthindex, y = inf_death)) + xlab("Wealth Index") + ylab("Infant Mortality Rate")
ggplot(means) + geom_point(aes(x = wealthindex, y = inf_death)) + xlab("Wealth Index") + ylab("Infant Mortality Rate") + labs("Relationship between Wealth and Infant Mortality in Nigeria")
ggplot(means) + geom_point(aes(x = wealthindex, y = inf_death)) + xlab("Wealth Index") + ylab("Infant Mortality Rate") + title("Relationship between Wealth and Infant Mortality in Nigeria")
ggplot(means) + geom_point(aes(x = wealthindex, y = inf_death)) + xlab("Wealth Index") + ylab("Infant Mortality Rate") + title("Relationship between Wealth and Infant Mortality in Nigeria")
ggplot(means) + geom_point(aes(x = wealthindex, y = inf_death)) + xlab("Wealth Index") + ylab("Infant Mortality Rate") + ggtitle("Relationship between Wealth and Infant Mortality in Nigeria")
ggplot(means) + geom_point(aes(x = wealthindex, y = inf_death)) + xlab("Wealth Index") + ylab("Infant Mortality Rate") + ggtitle("Wealth and Infant Mortality in Nigeria")
ggplot(means) + geom_point(aes(x = wealthindex, y = inf_death)) + xlab("Wealth Index") + ylab("Infant Mortality Rate") + ggtitle("       Wealth and Infant Mortality in Nigeria")
ggplot(means) + geom_point(aes(x = wealthindex, y = inf_death)) + xlab("Wealth Index") + ylab("Infant Mortality Rate") + ggtitle("          Wealth and Infant Mortality in Nigeria")
ggplot(means) + geom_point(aes(x = wealthindex, y = inf_death)) + xlab("Wealth Index") + ylab("Infant Mortality Rate") + ggtitle("            Wealth and Infant Mortality in Nigeria")
ggmap(map) + geom_point(aes(x = lon, y = lat, color = inf_death), size = 2, data = loc, alpha = .75) +
scale_colour_gradient(low = "green", high = "red", guide = "colourbar") + labs(color = "% Inf. Mortality") +
theme(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank())
ggmap(map) + geom_point(aes(x = lon, y = lat, color = inf_death), size = 2, data = loc, alpha = .75) +
scale_colour_gradient(low = muted("green"), high = "red", guide = "colourbar") + labs(color = "% Inf. Mortality") +
theme(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank())
#importing relevant libraries
library(data.table)
library(dplyr)
library(ggplot2)
library(ggmap)
library(scales)
#setting seed to ensure that randomized calculations are constant
set.seed(50)
#importing file, removing column of ids
data = as.data.frame(fread("MotherData.csv", stringsAsFactors = TRUE))
#splitting data to mother related data and baby related data
mothers = data[, c(1:78, 439:ncol(data))]
babies = data[, c(1, 79:438)]
#converting baby data to long format and renaming columns
babies = reshape(babies, varying = names(babies[, -1]), sep = "_", direction = "long")
babies = select(babies, caseid, bord, b0, b1, b2, b7, b9)
names(babies) = c("caseid", "bord", "twin", "month", "year", "months_lived", "lives_with")
#removing lines for mothers that didn't have a baby
babies = babies[complete.cases(babies[, "bord"]), ]
#creating dummy variable for babies who die before reaching one year
babies$inf_death = as.numeric(babies$months_lived < 12)
#setting inf_death to 0 for babies that are still alive
babies[is.na(babies$inf_death), "inf_death"] = 0
#selecting relevant mother data
mothers = select(mothers, caseid, v005, v006, v007, v009, v010, v113, v116, v119,
v120, v121, v122, v123, v124, v125, v127, v128, v129, v130, v131, v133,
v135, v136, v137, v150, v151, v152, v153, v155, v161, v191, v201, v212)
#renaming to help interpret results
names(mothers) = c("caseid", "samp_weight", "monthint", "yearint", "monthmom", "yearmom",
"water", "toilet", "electricity", "radio", "tv", "fridge",
"bike", "motorcycle", "car", "floor", "walls", "roof", "religion", "ethnicity",
"education", "usual", "housemem", "housechild","reltohead", "sexhead",
"agehead", "teleph", "literacy", "cookingfuel", "wealthindex", "childrenborn",
"agefirstbirth")
full = merge(mothers, babies)
#removing 9, 99, and 999 (NA codes) from rows that do not contain true 9's
rows = full[, -c(3, 5, 21, 23, 24, 32, 33, 34, 36, 38)]
rows[rows == "9"] = NA
rows[rows == "99"] = NA
rows[rows == "999"] = NA
full[, -c(3, 5, 21, 23, 24, 32, 33, 34, 36, 38)] = rows
full[full == ""] = NA
cols <- c("A", "C", "D", "H")
data[cols] <- lapply(data[cols], factor)
